image: golang:latest

variables:
  REPO_NAME: github.com/k-box/http-failure-server

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$REPO_NAME
  - ln -svf $CI_PROJECT_DIR/* $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
    - test
    - build
    - release

format:
    stage: test
    tags:
      - docker
    script:
      - go fmt $(go list ./... | grep -v /vendor/)
      - go vet $(go list ./... | grep -v /vendor/)
      - go test -race $(go list ./... | grep -v /vendor/)

compile:
    stage: build
    tags:
      - docker
    script:
      - GOOS=linux   GOARCH=amd64 go build -o $CI_PROJECT_DIR/failure
      - GOOS=windows GOARCH=amd64 go build -o $CI_PROJECT_DIR/failure.exe
    artifacts:
      expire_in: "8 hrs"
      paths:
        - failure
        - failure.exe

minify:
    stage: release
    tags:
      - docker
    dependencies:
      - compile
    image:
      name: znly/upx:latest
      entrypoint: ["/bin/sh", "-c"]
    script:
      - upx --best --brute $CI_PROJECT_DIR/failure
      - upx --best --brute $CI_PROJECT_DIR/failure.exe
    artifacts:
      paths:
        - failure
        - failure.exe
    only:
      - tags
